Carlos Carrillo-Calderon11/01/2016OSU-CS362Assignment 5


Blackjack game bug report #3
Title:     	“PROGRAM CRASHES WHEN PLAYER DOES NOT STAND”

Class:		“Serious Bug”

Date:           11/01/2016
Reported By:    Carlos Carrillo-Calderon
Email:      	carilca@oregonstate.edu


Product:     	 Mockito                  Version: 1.8
Platform:        MacOS Sierra             Version: 10.12.1       

Reproducible: 	 Yes. Every time.

Description
===========
If the player never stands, which can be possible since he can keep hitting until his card numbers surpass the game limit (21), the program gets into a sort of infinite loop that may last until 3-4 mins. After this undesirable situation happens, the test generates a BUILD FAILURE and a PluginExecutionException. 


Steps to Produce/Reproduce
--------------------------

1) Create a Mockito test class called “MockBlackjackTest” and then a test function within this class:

	public class MockBlackjackTest {
    		@Test
    		public void blackJackMock1(){

2) Create a DealerAction and a PlayerAction object within the test function:

	DealerAction dt = mock(DealerAction.class);
        PlayerAction pa = mock(PlayerAction.class);

3) Execute ONLY HIT PlayerActions consecutively, like this:

	when(pa.getAction()).thenReturn(PlayerAction.ActionType.HIT)
                            .thenReturn(PlayerAction.ActionType.HIT)
                            .thenReturn(PlayerAction.ActionType.HIT)
                            .thenReturn(PlayerAction.ActionType.HIT)
                            .thenReturn(PlayerAction.ActionType.HIT);

4) Create a SimpleBlackjack object and use it to instantiate playRound():

	SimpleBlackjack j = new SimpleBlackjack(dt, new PlayerAction[]{pa});
        j.playRound();

5) Finally, call the verify function to check if the number of cards played is correct:

	verify(dt, times(1)).dealCard(pa);

The whole test class should look like something similar to this:

	public class MockBlackjackTest {
    
   		 @Test
    		public void blackJackMock(){
         
        		DealerAction dt = mock(DealerAction.class);
         		PlayerAction pa = mock(PlayerAction.class);
     
         		when(pa.getAction()).thenReturn(PlayerAction.ActionType.HIT)
                            		    .thenReturn(PlayerAction.ActionType.HIT)
                            		    .thenReturn(PlayerAction.ActionType.HIT)
                            		    .thenReturn(PlayerAction.ActionType.HIT)
                            		    .thenReturn(PlayerAction.ActionType.HIT);

         		SimpleBlackjack j = new SimpleBlackjack(dt, new PlayerAction[]{pa});
         		j.playRound();
     
         		verify(dt, times(5)).dealCard(pa);
    		}
	}


Expected Results
----------------
Since the player is allowed to hit until his card numbers surpasses the game limit, the program should pass the test because, in theory, the player is doing nothing wrong. In other words, the test should not realizes that the player exceed the card number limit unless it is told to do so. In this case, we’re just simulating hits so there is not way for the test to know that there is a limit of hits, so we should’ve gotten a BUILD SUCCESS like:

	Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.003 sec - in 
	edu.osu.blackjack.CardTest

	Results :

	Tests run: 6, Failures: 0, Errors: 0, Skipped: 0

	[INFO] ------------------------------------------------------------------------
	[INFO] BUILD SUCCESS
	[INFO] ------------------------------------------------------------------------
	[INFO] Total time: 4.111s
	[INFO] Finished at: Tue Nov 01 15:48:38 PDT 2016
	[INFO] Final Memory: 23M/1104M
	[INFO] ------------------------------------------------------------------------


Actual Results
--------------
Instead, the test throws several errors and a BUILD FAILURE:

	-------------------------------------------------------
 	T E S T S
	-------------------------------------------------------
	Running edu.osu.blackjack.MockBlackjackTest

	Results :

	Tests run: 0, Failures: 0, Errors: 0, Skipped: 0

	[INFO] ------------------------------------------------------------------------
	[INFO] BUILD FAILURE
	[INFO] ------------------------------------------------------------------------
	[INFO] Total time: 2:06.337s
	[INFO] Finished at: Tue Nov 01 19:20:42 PDT 2016
	[INFO] Final Memory: 23M/1102M
	[INFO] ------------------------------------------------------------------------
	[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.19:test 
	(default-test) on project hw3: Execution default-test of goal org.apache.maven.plugins:
	maven-surefire-plugin:2.19:test failed: The forked VM terminated without properly saying 
	goodbye. VM crash or System.exit called?

	
Workarounds
-----------
The only workaround possible on the Mockito test to continue using/running the software is adding a STAND PlayerAction right after the set of HIT actions:

	when(pa.getAction()).thenReturn(PlayerAction.ActionType.HIT)
                            .thenReturn(PlayerAction.ActionType.HIT)
                            .thenReturn(PlayerAction.ActionType.HIT)
                            .thenReturn(PlayerAction.ActionType.HIT)
                            .thenReturn(PlayerAction.ActionType.STAND);

On the other hand, a workaround can be made in SimpleBlackjack in order to eliminate the bug. This workaround is adding a line of code added within the switch case from playRound() in order to let the dealer hit a card as many times as the player wants without getting the program into a long loop delay and then a BUILD FAILURE. Thus, the playRound() would be modified as follows:

	switch(a){
                    case HIT:
                        
                        dealer.dealCard(p);
                        
                        //Modification made to pass blackJackMock5()
                        //Let the dealer hit a card as many times as the
                        //player wants without getting the program into
                        //a long loop delay and then a BUILD FAILURE.
                        turnOver = true;
                        
                        break;
                    case DOUBLE:
                        p.doubleDownBet();
                        dealer.dealCard(p);
                        turnOver = true;
                        break;
                        
                    default: // STAND                       
                        turnOver = true;
                        break;
                }


Attachments
-----------
No Attachments required for this particular school analysis/report.


